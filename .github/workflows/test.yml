name: Build & Test

on:
  push:
    branches: [main]
  pull_request:

defaults:
  run:
    shell: bash


env:
  BUILD_CACHE_KEY: ${{ github.event.inputs.commit || github.sha }}
  CACHED_BUILD_PATHS: |
    ${{ github.workspace }}/packages/*/dist
    ${{ github.workspace }}/packages/*/bin

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'pnpm'

      - name: Setup dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build

      - name: Store standalone spotlight binary
        uses: actions/upload-artifact@v4
        with:
          name: spotlight-linux
          path: |
            packages/spotlight/dist/spotlight

      - name: Store Spotlight CJS
        uses: actions/upload-artifact@v4
        with:
          name: spotlight-cjs
          if-no-files-found: error
          path: |
            packages/spotlight/dist/spotlight.cjs
            packages/spotlight/dist/overlay/

      - name: Update build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

  build-macos-binary:
    name: MacOS Single Executable Node App
    runs-on: macos-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'pnpm'

      - name: Setup dependencies
        run: pnpm install

      - name: Get CJS file
        uses: actions/download-artifact@v4
        with:
          name: spotlight-cjs
          path: packages/spotlight/dist

      - name: Create MacOS Binary
        env:
          APPLE_CERT_DATA: ${{ secrets.CSC_LINK }}
          APPLE_CERT_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.TEAMID }}
          APPLE_ID:  ${{ secrets.APPLEID }}
          APPLE_ID_PASS:  ${{ secrets.APPLEIDPASS }}
        # Code below lifted from https://github.com/lando/code-sign-action/blob/0779d463b08142ea9cb9bc87dc755670a8675c30/action.yml
        run: |
          # Export certs
          echo "$APPLE_CERT_DATA" | base64 --decode > /tmp/certs.p12

          # Create keychain
          security create-keychain -p actions macos-build.keychain
          security default-keychain -s macos-build.keychain
          security unlock-keychain -p actions macos-build.keychain
          security set-keychain-settings -t 3600 -u macos-build.keychain

          # Import certs to keychain
          security import /tmp/certs.p12 -k ~/Library/Keychains/macos-build.keychain -P "$APPLE_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign

          # Key signing
          security set-key-partition-list -S apple-tool:,apple: -s -k actions macos-build.keychain

          # Verify keychain identity
          security find-identity -v macos-build.keychain | grep "$APPLE_TEAM_ID" | grep "Developer ID Application"

          cd packages/spotlight
          bin/build.js
          chmod +x dist/spotlight

          ./dist/spotlight 2>&1 > /dev/null &
          curl -sf --retry 12 --retry-all-errors -o /dev/null 'http://localhost:8969/' && echo "Spotlight ran successfully"

      - name: Store standalone spotlight binary
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: spotlight-macos
          path: packages/spotlight/dist/spotlight

  test-docker:
    name: Docker Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files-yaml
        uses: tj-actions/changed-files@v41
        with:
          files_yaml: |
            docker:
              - Dockerfile
              - .github/workflows/test.yml

      - name: Get CJS file
        uses: actions/download-artifact@v4
        if: ${{ inputs.force || steps.changed-files-yaml.outputs.docker_any_changed == 'true' }}
        with:
          name: spotlight-cjs
          path: packages/spotlight/dist

      - name: Configure Docker Context
        if: ${{ inputs.force || steps.changed-files-yaml.outputs.docker_any_changed == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        if: ${{ inputs.force || steps.changed-files-yaml.outputs.docker_any_changed == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          no-cache: ${{ inputs.nocache == 'true' }}

  test-unit:
    name: Unit Tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [18, 20, 22]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.version }}
          cache: 'pnpm'

      - name: Setup dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: Run tests
        run: pnpm test:ci

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure()
        with:
          report_paths: '**/junit.xml'

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-e2e:
    name: E2E Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'pnpm'

      - name: Setup dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: Run tests
        run: pnpm test:e2e:ci
