name: Publish
on:
  workflow_run:
    workflows:
      - Build & Test
    types:
      - completed
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}

env:
  BUILD_CACHE_KEY: ${{ github.event.workflow_run.head_sha }}
  CACHED_BUILD_PATHS: |
    ${{ github.workspace }}/packages/*/dist
    ${{ github.workspace }}/packages/*/bin

jobs:
  npm:
    name: NPM Package
    runs-on: ubuntu-latest
    # For whatever reason, yaml does not like the full "meta(changelog): Update package versions" string
    # So we check this in two parts
    if: >-
      (
        github.event.workflow_run.conclusion == 'success'
        &&
        contains(github.event.workflow_run.head_commit.message, 'meta(changelog)')
        &&
        contains(github.event.workflow_run.head_commit.message, 'Update package versions')
      )
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}


      - name: Publish to NPM
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          BUILD_PLATFORMS: 'linux-x64,linux-arm64,win-x64,darwin-x64,darwin-arm64'
        with:
          publish: pnpm changeset:publish
          createGithubReleases: true

      - name: Store standalone spotlight binary
        uses: actions/upload-artifact@v4
        with:
          name: spotlight
          if-no-files-found: error
          path: packages/spotlight/dist/spotlight-*

      - name: Gets latest created release info
        id: latest_release_info
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: packages/spotlight/dist/spotlight-*
          tag: ${{ steps.latest_release_info.outputs.tag_name }}
          make_latest: false

  docker:
    name: Docker Image
    needs: npm
    runs-on: ubuntu-latest
    if: |
      !cancelled()
      && needs.npm.result == 'success'
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-buildx-action@v3

      - name: Push Docker Image as latest
        run: >-
          docker buildx imagetools create
          --tag ghcr.io/getsentry/spotlight:latest
          ghcr.io/getsentry/spotlight:${{ github.sha }}

      - name: Summarize
        run: |
          echo "**Tag:** ``ghcr.io/getsentry/spotlight:${{ github.sha }}``" >> $GITHUB_STEP_SUMMARY

  electron:
    name: Electron Build
    needs: npm
    runs-on: macos-latest
    if: |
      !cancelled()
      && needs.npm.result == 'success'

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Setup pnpm & install dependencies
        uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Build Electron
        env:
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          TEAMID: ${{ secrets.TEAMID }}
          CERT_PASS: ${{ secrets.CERT_PASS }}
          MAIN_VITE_SENTRY_ORG: ${{ secrets.MAIN_VITE_SENTRY_ORG }}
          MAIN_VITE_SENTRY_PROJECT: ${{ secrets.MAIN_VITE_SENTRY_PROJECT }}
          MAIN_VITE_SENTRY_AUTH_TOKEN: ${{ secrets.MAIN_VITE_SENTRY_AUTH_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: cd packages/electron && pnpm build:mac

      - name: Gets latest created release info
        id: latest_release_info
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/electron/dist/*.zip
          tag: ${{ steps.latest_release_info.outputs.tag_name }}
          file_glob: true
          make_latest: false
