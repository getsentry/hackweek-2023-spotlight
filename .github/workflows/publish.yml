name: Publish
on:
  push:
    branches:
      - main
    paths:
      - '**/CHANGELOG.md'
  workflow_dispatch:
    inputs:
      nocache:
        description: 'Do not rely on existing Docker layer cache'
        default: false
        type: boolean
      docker:
        description: 'Publish Docker package'
        default: true
        type: boolean
      npm:
        description: 'Publish NPM package (immutable)'
        default: true
        type: boolean
      electron:
        description: 'Publish Electron package'
        default: true
        type: boolean
concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:
  npm:
    name: NPM Package
    runs-on: ubuntu-latest
    # For whatever reason, yaml does not like the full "meta(changelog): Update package versions" string
    # So we check this in two parts
    if: >-
      (
        contains(github.event.head_commit.message, 'meta(changelog)')
        &&
        contains(github.event.head_commit.message, 'Update package versions')
      ) || inputs.npm
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Setup pnpm & install dependencies
        uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Publish to NPM
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          publish: pnpm changeset:publish
          createGithubReleases: true

      - name: Store Spotlight CJS
        uses: actions/upload-artifact@v4
        with:
          name: spotlight-cjs
          if-no-files-found: error
          path: |
            packages/spotlight/dist/spotlight.cjs
            packages/spotlight/dist/overlay/

      - name: Store standalone spotlight binary
        uses: actions/upload-artifact@v4
        with:
          name: spotlight-linux
          if-no-files-found: error
          path: |
            packages/spotlight/dist/spotlight

      - name: Gets latest created release info
        id: latest_release_info
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/spotlight/dist/spotlight
          file_name: spotlight-linux-x64
          tag: ${{ steps.latest_release_info.outputs.tag_name }}
          make_latest: false

  macos-binary:
    name: MacOS Single Executable Node App
    runs-on: macos-latest
    needs: npm
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'pnpm'

      - name: Setup dependencies
        run: pnpm install

      - name: Get CJS file
        uses: actions/download-artifact@v4
        with:
          name: spotlight-cjs
          path: packages/spotlight/dist

      - name: Create MacOS Binary
        env:
          APPLE_CERT_DATA: ${{ secrets.CSC_LINK }}
          APPLE_CERT_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.TEAMID }}
          APPLE_ID:  ${{ secrets.APPLEID }}
          APPLE_ID_PASS:  ${{ secrets.APPLEIDPASS }}
        # Code below lifted from https://github.com/lando/code-sign-action/blob/0779d463b08142ea9cb9bc87dc755670a8675c30/action.yml
        run: |
          # Export certs
          echo "$APPLE_CERT_DATA" | base64 --decode > /tmp/certs.p12

          # Create keychain
          security create-keychain -p actions macos-build.keychain
          security default-keychain -s macos-build.keychain
          security unlock-keychain -p actions macos-build.keychain
          security set-keychain-settings -t 3600 -u macos-build.keychain

          # Import certs to keychain
          security import /tmp/certs.p12 -k ~/Library/Keychains/macos-build.keychain -P "$APPLE_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign

          # Key signing
          security set-key-partition-list -S apple-tool:,apple: -s -k actions macos-build.keychain

          # Verify keychain identity
          security find-identity -v macos-build.keychain | grep "$APPLE_TEAM_ID" | grep "Developer ID Application"

          cd packages/spotlight
          bin/build.js

          ./dist/spotlight 2>&1 > /dev/null &
          curl -sf --retry 12 --retry-all-errors -o /dev/null 'http://localhost:8969/' && echo "Spotlight ran successfully"

      - name: Store standalone spotlight binary
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: spotlight-macos
          path: packages/spotlight/dist/spotlight

      - name: Gets latest created release info
        id: latest_release_info
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/spotlight/dist/spotlight.zip
          file_name: spotlight-macos-arm64
          tag: ${{ steps.latest_release_info.outputs.tag_name }}
          make_latest: false

  docker:
    name: Docker Image
    needs: npm
    runs-on: ubuntu-latest
    if: |
      !cancelled()
      && (inputs.docker || github.event_name == 'push')
      && (needs.npm.result == 'success' || needs.npm.result == 'skipped')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Spotlight binary
        uses: actions/download-artifact@v4
        with:
          name: spotlight-linux
          path: packages/spotlight/dist

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha,scope=prod
          no-cache: ${{ inputs.nocache == true }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/getsentry/spotlight:latest
            ghcr.io/getsentry/spotlight:${{ github.sha }}

      - name: Summarize
        run: |
          echo "**Tag:** ``ghcr.io/getsentry/spotlight:${{ github.sha }}``" >> $GITHUB_STEP_SUMMARY

  electron:
    name: Electron Build
    needs: npm
    runs-on: macos-latest
    if: |
      !cancelled()
      && (inputs.electron || github.event_name == 'push')
      && (needs.npm.result == 'success' || needs.npm.result == 'skipped')

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Setup pnpm & install dependencies
        uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Build Electron
        env:
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          TEAMID: ${{ secrets.TEAMID }}
          CERT_PASS: ${{ secrets.CERT_PASS }}
          MAIN_VITE_SENTRY_ORG: ${{ secrets.MAIN_VITE_SENTRY_ORG }}
          MAIN_VITE_SENTRY_PROJECT: ${{ secrets.MAIN_VITE_SENTRY_PROJECT }}
          MAIN_VITE_SENTRY_AUTH_TOKEN: ${{ secrets.MAIN_VITE_SENTRY_AUTH_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: cd packages/electron && pnpm build:mac

      - name: Gets latest created release info
        id: latest_release_info
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/electron/dist/*.zip
          tag: ${{ steps.latest_release_info.outputs.tag_name }}
          file_glob: true
          make_latest: false
